name: Database Backup
run-name: Backup MongoDB database

on:
  schedule:
    # Runs at 00:00 UTC every day
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  backup:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Install MongoDB tools
        run: |
          wget -qO - https://www.mongodb.org/static/pgp/server-8.0.asc | sudo apt-key add -
          echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/8.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-8.0.list
          sudo apt-get update
          sudo apt-get install -y mongodb-mongosh mongodb-database-tools

      - name: Extract database name
        id: db-info
        run: |
          # Extract database name from MONGODB_URI query parameter
          DB_NAME=$(echo "${{ secrets.MONGODB_URI }}" | grep -oP 'dbName=\K[^&]+' || echo "nearcade")
          echo "db_name=$DB_NAME" >> $GITHUB_OUTPUT
          echo "Database name: $DB_NAME"

      - name: Create backup
        run: |
          mkdir -p backup
          mongodump --uri="${{ secrets.MONGODB_URI }}" --db="${{ steps.db-info.outputs.db_name }}" --out=backup/
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI }}

      - name: Create compressed archive
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          tar -czf db-backup-${{ steps.db-info.outputs.db_name }}-${TIMESTAMP}.tar.gz -C backup .
          echo "BACKUP_FILE=db-backup-${{ steps.db-info.outputs.db_name }}-${TIMESTAMP}.tar.gz" >> $GITHUB_ENV

      - name: Create restore script
        run: |
          cat > restore-backup.sh << 'EOF'
          #!/bin/bash

          # MongoDB Backup Restore Script
          # This script extracts a backup archive and restores it to a MongoDB cluster
          # Usage: ./restore-backup.sh <backup-file.tar.gz> <mongodb-uri> [options]

          set -e  # Exit on error

          # Color codes for output
          RED='\033[0;31m'
          GREEN='\033[0;32m'
          YELLOW='\033[1;33m'
          NC='\033[0m' # No Color

          # Function to print colored messages
          print_info() {
              echo -e "${GREEN}[INFO]${NC} $1"
          }

          print_warning() {
              echo -e "${YELLOW}[WARNING]${NC} $1"
          }

          print_error() {
              echo -e "${RED}[ERROR]${NC} $1"
          }

          # Function to display usage
          usage() {
              cat << 'USAGE'
          Usage: $0 <backup-file.tar.gz> <mongodb-uri> [options]

          Arguments:
              backup-file.tar.gz    Path to the backup archive file
              mongodb-uri           MongoDB connection URI (e.g., mongodb://user:pass@host:port/dbname)

          Options:
              --drop                Drop existing collections before restoring (WARNING: destructive)
              --db <name>           Target database name (overrides the database in the backup)
              --dry-run             Extract and show what would be restored without actually restoring
              --keep-extracted      Keep the extracted backup files after restoration
              -h, --help            Show this help message

          Examples:
              # Basic restore
              $0 db-backup-nearcade-20231025-120000.tar.gz "mongodb://localhost:27017/nearcade"

              # Restore with drop (replace existing data)
              $0 db-backup-nearcade-20231025-120000.tar.gz "mongodb://localhost:27017/nearcade" --drop

              # Restore to a different database
              $0 db-backup-nearcade-20231025-120000.tar.gz "mongodb://localhost:27017" --db nearcade_restore

          USAGE
              exit 1
          }

          # Check if help is requested
          if [[ "$1" == "-h" || "$1" == "--help" ]]; then
              usage
          fi

          # Check if required arguments are provided
          if [ $# -lt 2 ]; then
              print_error "Missing required arguments"
              echo ""
              usage
          fi

          BACKUP_FILE="$1"
          MONGODB_URI="$2"
          shift 2

          # Parse optional arguments
          DROP_OPTION=""
          TARGET_DB=""
          DRY_RUN=false
          KEEP_EXTRACTED=false

          while [[ $# -gt 0 ]]; do
              case $1 in
                  --drop)
                      DROP_OPTION="--drop"
                      shift
                      ;;
                  --db)
                      TARGET_DB="$2"
                      shift 2
                      ;;
                  --dry-run)
                      DRY_RUN=true
                      shift
                      ;;
                  --keep-extracted)
                      KEEP_EXTRACTED=true
                      shift
                      ;;
                  *)
                      print_error "Unknown option: $1"
                      usage
                      ;;
              esac
          done

          # Validate backup file exists
          if [ ! -f "$BACKUP_FILE" ]; then
              print_error "Backup file not found: $BACKUP_FILE"
              exit 1
          fi

          # Check if mongorestore is installed
          if ! command -v mongorestore >/dev/null 2>&1; then
              print_error "mongorestore is not installed"
              echo "Please install MongoDB Database Tools:"
              echo "  - Ubuntu/Debian: sudo apt-get install mongodb-database-tools"
              echo "  - macOS: brew install mongodb-database-tools"
              echo "  - Windows: Download from https://www.mongodb.com/try/download/database-tools"
              exit 1
          fi

          # Create temporary directory for extraction
          TEMP_DIR=$(mktemp -d)
          EXTRACT_DIR="$TEMP_DIR/backup"

          print_info "Starting MongoDB backup restoration process"
          print_info "Backup file: $BACKUP_FILE"
          print_info "MongoDB URI: ${MONGODB_URI%%\?*}"  # Hide query parameters for security

          # Extract the backup archive
          print_info "Extracting backup archive to temporary directory..."
          mkdir -p "$EXTRACT_DIR"
          tar -xzf "$BACKUP_FILE" -C "$EXTRACT_DIR"

          if [ $? -ne 0 ]; then
              print_error "Failed to extract backup archive"
              rm -rf "$TEMP_DIR"
              exit 1
          fi

          print_info "Backup extracted successfully"

          # Detect database name from extracted structure
          BACKUP_DB_NAME=$(ls "$EXTRACT_DIR" | head -n 1)
          if [ -z "$BACKUP_DB_NAME" ]; then
              print_error "Could not detect database name from backup"
              rm -rf "$TEMP_DIR"
              exit 1
          fi

          print_info "Detected database in backup: $BACKUP_DB_NAME"

          # Determine target database
          if [ -n "$TARGET_DB" ]; then
              print_info "Target database (override): $TARGET_DB"
              NSINCLUDE_OPTION="--nsInclude=${BACKUP_DB_NAME}.* --nsFrom=${BACKUP_DB_NAME}.* --nsTo=${TARGET_DB}.*"
          else
              print_info "Target database: $BACKUP_DB_NAME (from backup)"
              NSINCLUDE_OPTION=""
          fi

          # List collections in backup
          print_info "Collections in backup:"
          for collection in "$EXTRACT_DIR/$BACKUP_DB_NAME"/*.bson; do
              if [ -f "$collection" ]; then
                  basename "$collection" .bson | sed 's/^/  - /'
              fi
          done

          # Dry run - show what would be done
          if [ "$DRY_RUN" = true ]; then
              print_warning "DRY RUN MODE - No actual restoration will occur"
              print_info "Would execute:"
              echo "  mongorestore --uri=\"${MONGODB_URI}\" $DROP_OPTION $NSINCLUDE_OPTION \"$EXTRACT_DIR\""
              rm -rf "$TEMP_DIR"
              exit 0
          fi

          # Confirm if drop option is used
          if [ -n "$DROP_OPTION" ]; then
              print_warning "WARNING: --drop option is enabled. This will DELETE existing collections!"
              read -p "Are you sure you want to continue? (yes/no): " -r
              echo
              if [[ ! $REPLY =~ ^[Yy][Ee][Ss]$ ]]; then
                  print_info "Restoration cancelled by user"
                  rm -rf "$TEMP_DIR"
                  exit 0
              fi
          fi

          # Perform the restoration
          print_info "Starting database restoration..."
          echo ""

          if mongorestore --uri="$MONGODB_URI" $DROP_OPTION $NSINCLUDE_OPTION "$EXTRACT_DIR"; then
              echo ""
              print_info "✓ Database restoration completed successfully!"
          else
              echo ""
              print_error "✗ Database restoration failed"
              rm -rf "$TEMP_DIR"
              exit 1
          fi

          # Cleanup
          if [ "$KEEP_EXTRACTED" = true ]; then
              print_info "Extracted files kept at: $TEMP_DIR"
          else
              print_info "Cleaning up temporary files..."
              rm -rf "$TEMP_DIR"
          fi

          print_info "Restoration process complete"
          EOF
          chmod +x restore-backup.sh

      - name: Upload backup as artifact
        uses: actions/upload-artifact@v4
        with:
          name: db-backup-${{ steps.db-info.outputs.db_name }}-${{ github.run_number }}
          path: |
            db-backup-*.tar.gz
            restore-backup.sh
          retention-days: 90
          compression-level: 0
